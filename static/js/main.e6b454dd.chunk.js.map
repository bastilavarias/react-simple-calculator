{"version":3,"sources":["components/calculator/Screen.js","components/calculator/InputButton.js","components/calculator/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Screen","value","history","className","readOnly","placeholder","title","InputButton","type","text","specifier","onClick","operationDictionary","addition","subtraction","multiplication","division","equals","Calculator","useState","screenValue","setScreenValue","screenHistory","setScreenHistory","firstNumber","setFirstNumber","execOperation","setExecOperation","handleInputButtonClick","hasDecimal","split","includes","Object","values","length","handleInputButtonOperationClick","operation","firstNum","parseFloat","secondNumber","result","toFixed","toString","parseInt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6b454dd.chunk.js","sourcesContent":["import './Calculator.css';\n\nfunction Screen({ value, history }) {\n    return (\n        <div className=\"screen\">\n            <input\n                className=\"screen-input\"\n                readOnly\n                value={value}\n                placeholder=\"0\"\n            />\n            <span className=\"screen-history\" title={history}>\n                {history}\n            </span>\n        </div>\n    );\n}\n\nexport default Screen;\n","import './Calculator.css';\n\nfunction InputButton({ type, text, specifier, onClick }) {\n    return (\n        <button\n            className={`input-button input-button-${type} input-button-${specifier}`}\n            onClick={onClick}\n        >\n            {text}\n        </button>\n    );\n}\n\nexport default InputButton;\n","import './Calculator.css';\nimport Screen from './Screen';\nimport InputButton from './InputButton';\nimport { useState } from 'react';\n\nconst operationDictionary = {\n    addition: '+',\n    subtraction: '-',\n    multiplication: '×',\n    division: '÷',\n    equals: '=',\n};\n\nfunction Calculator() {\n    const [screenValue, setScreenValue] = useState('');\n    const [screenHistory, setScreenHistory] = useState('');\n    const [firstNumber, setFirstNumber] = useState(0);\n    const [execOperation, setExecOperation] = useState('');\n\n    const handleInputButtonClick = (text) => {\n        const hasDecimal = screenValue.split('').includes('.');\n        if (Object.values(operationDictionary).includes(text)) return;\n        if (text === '.' && hasDecimal) return;\n        if (screenValue.length >= 9) return;\n        setScreenValue(screenValue + text || 0);\n    };\n\n    const handleInputButtonOperationClick = (operation) => {\n        if (screenValue.length === 0) return;\n        const firstNum = parseFloat(screenValue);\n        setFirstNumber(firstNum);\n        setExecOperation(operation);\n        setScreenHistory(`${firstNum} ${operation}`);\n        setScreenValue('');\n    };\n\n    const handleInputButtonEqualsClick = () => {\n        const secondNumber = parseFloat(screenValue) || 0;\n        let result = firstNumber + secondNumber;\n        if (execOperation === '-') result = firstNumber - secondNumber;\n        if (execOperation === '×') result = firstNumber * secondNumber;\n        if (execOperation === '÷') result = firstNumber / secondNumber;\n        result = result.toFixed(2);\n        result = result.toString().includes('.00') ? parseInt(result) : result;\n        setScreenValue(result);\n        setScreenHistory(\n            `${firstNumber} ${execOperation} ${secondNumber} = ${result}`\n        );\n    };\n\n    const handleInputButtonClearClick = () => {\n        setFirstNumber(0);\n        setScreenHistory('');\n        setScreenValue('');\n    };\n\n    return (\n        <div className=\"calculator\">\n            <Screen value={screenValue} history={screenHistory} />\n            <div className=\"button-row\">\n                <InputButton\n                    type=\"primary\"\n                    text=\"7\"\n                    onClick={() => handleInputButtonClick('7')}\n                />\n                <InputButton\n                    type=\"primary\"\n                    text=\"8\"\n                    onClick={() => handleInputButtonClick('8')}\n                />\n                <InputButton\n                    type=\"primary\"\n                    text=\"9\"\n                    onClick={() => handleInputButtonClick('9')}\n                />\n                <InputButton\n                    type=\"secondary\"\n                    text={operationDictionary.division}\n                    onClick={() =>\n                        handleInputButtonOperationClick(\n                            operationDictionary.division\n                        )\n                    }\n                />\n            </div>\n            <div className=\"button-row\">\n                <InputButton\n                    type=\"primary\"\n                    text=\"4\"\n                    onClick={() => handleInputButtonClick('4')}\n                />\n                <InputButton\n                    type=\"primary\"\n                    text=\"5\"\n                    onClick={() => handleInputButtonClick('5')}\n                />\n                <InputButton\n                    type=\"primary\"\n                    text=\"6\"\n                    onClick={() => handleInputButtonClick('6')}\n                />\n                <InputButton\n                    type=\"secondary\"\n                    text={operationDictionary.multiplication}\n                    onClick={() =>\n                        handleInputButtonOperationClick(\n                            operationDictionary.multiplication\n                        )\n                    }\n                />\n            </div>\n            <div className=\"button-row\">\n                <InputButton\n                    type=\"primary\"\n                    text=\"1\"\n                    onClick={() => handleInputButtonClick('1')}\n                />\n                <InputButton\n                    type=\"primary\"\n                    text=\"2\"\n                    onClick={() => handleInputButtonClick('2')}\n                />\n                <InputButton\n                    type=\"primary\"\n                    text=\"3\"\n                    onClick={() => handleInputButtonClick('3')}\n                />\n                <InputButton\n                    type=\"secondary\"\n                    text={operationDictionary.addition}\n                    onClick={() =>\n                        handleInputButtonOperationClick(\n                            operationDictionary.addition\n                        )\n                    }\n                />\n            </div>\n            <div className=\"button-row\">\n                <InputButton\n                    type=\"primary\"\n                    text=\".\"\n                    onClick={() => handleInputButtonClick('.')}\n                />\n                <InputButton\n                    type=\"primary\"\n                    text=\"0\"\n                    onClick={() => handleInputButtonClick('0')}\n                />\n                <InputButton\n                    type=\"primary\"\n                    text=\"00\"\n                    onClick={() => handleInputButtonClick('00')}\n                />\n                <InputButton\n                    type=\"secondary\"\n                    text={operationDictionary.subtraction}\n                    onClick={() =>\n                        handleInputButtonOperationClick(\n                            operationDictionary.subtraction\n                        )\n                    }\n                />\n            </div>\n            <div className=\"footer-row\">\n                <InputButton\n                    type=\"secondary\"\n                    text=\"C\"\n                    specifier=\"clear\"\n                    onClick={handleInputButtonClearClick}\n                />\n                <InputButton\n                    type=\"primary\"\n                    text={operationDictionary.equals}\n                    onClick={handleInputButtonEqualsClick}\n                    specifier=\"equals\"\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default Calculator;\n","import './App.css';\nimport Calculator from \"./components/calculator/Calculator\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n        <Calculator/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}